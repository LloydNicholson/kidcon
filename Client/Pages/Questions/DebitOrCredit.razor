@page "/debit-or-credit"
@using System.Timers;
@implements IDisposable

<div class="row">
    <div class="col">
        <h2>Debit or Credit</h2>
        <p>Being able to determine which side an account increases and decreases gives you a distinct advantage when doing any transaction in Accounting.</p>
        <p>Choose the side on which the following accounts increase and see your score at the end.</p>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <Question>
            <Component>
                <DebitOrCreditQuestion Account="Account"
                                       Answered="@((ans) => Answered(ans))"
                                       DidAnswer="DidAnswer"
                                       QuestionCount="QuestionCount"
                                       Score="Score" />
            </Component>
        </Question>
    </div>
    <div class="col-lg-6">
        @if (DidAnswer)
        {
            <QuestionFeedback Time="Time"
                              Account="Account"
                              Correct="Correct"
                              QuestionCount="QuestionCount"
                              Score="Score" />

            @if (QuestionCount >= 10)
            {
                DialogIsOpen = true;
                timer.Stop();
                <QuestionFinishedModal Restart="RestartGame" DialogIsOpen="DialogIsOpen" Score="Score" />
            }
        }
    </div>
</div>

@code {
    [Inject]
    public IAccountService AccountService { get; set; }

    public List<Account> Accounts { get; set; }
    public Account Account { get; set; }

    public bool Correct { get; set; } = false;
    public double Time { get; set; } = 1.0;

    public string Answer { get; set; }
    public bool DidAnswer { get; set; }
    public int Score { get; set; }
    public int QuestionCount { get; set; } = 0;


    public bool DialogIsOpen { get; set; } = false;

    Timer timer = new Timer()
    {
        Interval = 600
    };

    protected override async Task OnInitializedAsync()
    {
        timer.Elapsed += TimerOnElapsed;

        await GetAccounts();
        GetAccount();
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        Time -= 0.1;
        StateHasChanged();
        if (Time <= 0)
        {
            timer.Stop();
            GetAccount();
        }
    }

    protected async Task GetAccounts()
    {
        Accounts = await AccountService.GetRandomAccounts();
    }

    protected void GetAccount()
    {
        Account = Accounts[QuestionCount];
        Answer = null;
        DidAnswer = false;
        Time = 1.0;
        StateHasChanged();
    }

    protected void Answered(string answer)
    {
        DidAnswer = true;
        Answer = answer;
        Correct = Answer == Account.IncreasingSide;

        if (Correct)
        {
            Score++;
        }
        QuestionCount++;

        timer.Start();
    }

    public async Task RestartGame()
    {
        Score = 0;
        QuestionCount = 0;
        await GetAccounts();
        GetAccount();
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
}
